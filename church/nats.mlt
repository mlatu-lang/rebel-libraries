#wield combinators.mlt
#wield church/bools.mlt

# church numbers:
#   (f) 3<   |->   (f f f)
# x (f) 3<<  |->  x f f f
0_N    = (-()).
succ_N = (+)~,(,),.
add_N  = (succ_N)~<<.
mul_N  = ,.
exp_N  = <.

pred   = (()~(+))~+(<--()),~(,)~<,,.
add2   = (~),(+)~,~(,),,. # GNU's definition
sub    = (pred)~<<.
sqr    = +mul.

0 = 0_N. 1 = 0 succ. 2 = 1 succ. 3 = 2 succ. 4 = 3 succ. 5 = 4 succ. 6 = 5 succ. 7 = 6 succ. 8 = 7 succ. 9 = 8 succ. 10 = 9 succ.
100 = 10 10 mul. 1000 = 100 10 mul. 10000 = 100 100 mul.

eq? = ((a)~<<)dip (b)~<< true.
a b = . a true = false. a false = false. b true = false. b false = false.
bigger?_N = ((big1_N)~<<)dip (big2_N)~<< false.
big1_N big2_N = . big1_N false = true. big1_N true = true. big2_N false = false.

eq0? = (true(-false))dip<<<.

0_ digit succ = 1_.
1_ digit succ = 2_.
2_ digit succ = 3_.
3_ digit succ = 4_.
4_ digit succ = 5_.
5_ digit succ = 6_.
6_ digit succ = 7_.
7_ digit succ = 8_.
8_ digit succ = 9_.
9_ digit succ = digit succ 0_.
digit succ = 1_.
base ten = (0_)dip (digit succ) ~<<.

succ    = succ_N.
add     = add_N.
mul     = mul_N.
exp     = exp_N.
bigger? = bigger?_N.